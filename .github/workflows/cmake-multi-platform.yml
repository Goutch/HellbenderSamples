# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout repository with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive  # This is the key!
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Install Vulkan SDK (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl -L https://sdk.lunarg.com/sdk/download/1.4.309.0/linux/vulkansdk-linux-x86_64-1.4.309.0.tar.xz -o vulkan-sdk.tar.gz
    
        # Extract the tarball
        tar -xvzf vulkan-sdk.tar.gz
    
        # Set the Vulkan SDK environment variable
        export VULKAN_SDK=$(pwd)/vulkan-sdk
        echo "VULKAN_SDK=$VULKAN_SDK" >> $GITHUB_ENV
        echo "$VULKAN_SDK/bin" >> $GITHUB_PATH
        echo "$VULKAN_SDK/lib" >> $GITHUB_PATH
        echo "$VULKAN_SDK/include" >> $GITHUB_PATH
    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Define the Vulkan SDK version to download
        $vulkan_sdk_url = "https://sdk.lunarg.com/sdk/download/1.4.309.0/windows/VulkanSDK-1.4.309.0-Installer.exe"
        $vulkan_sdk_installer = "$env:temp\vulkan-sdk-installer.exe"

        # Download the Vulkan SDK installer
        Invoke-WebRequest -Uri $vulkan_sdk_url -OutFile $vulkan_sdk_installer

        # Run the installer silently
        Start-Process -FilePath $vulkan_sdk_installer -ArgumentList "/S" -Wait

        # Set the VULKAN_SDK environment variable
        $vulkan_sdk_path = "C:\VulkanSDK"
        echo "VULKAN_SDK=$vulkan_sdk_path" >> $env:GITHUB_ENV
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
